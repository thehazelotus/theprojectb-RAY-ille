const int buzzerPins[6] = {2, 3, 4, 5, 6, 7}; // Pins connected to the buzzers

void setup() {
  Serial.begin(9600); // Start serial communication
  for (int i = 0; i < 6; i++) {
    pinMode(buzzerPins[i], OUTPUT); // Set each buzzer pin as an output
    digitalWrite(buzzerPins[i], LOW); // Ensure all buzzers are off initially
  }
  Serial.println("Enter text to display in Braille:");
}

void loop() {
  if (Serial.available() > 0) {
    String input = Serial.readString(); // Read the user input
    input.trim(); // Remove any leading/trailing whitespace

    for (int i = 0; i < input.length(); i++) {
      displayBrailleCharacter(input.charAt(i)); // Display each character
      delay(2000); // Wait 2 seconds between characters
    }
  }
}

// Braille pattern to alphabet mapping
void displayBrailleCharacter(char character) {
  int braille[6] = {0}; // Initialize the Braille dot states to 0

  switch (tolower(character)) {
    case 'a': braille[0] = 1; break; // Dot 1
    case 'b': braille[0] = 1; braille[1] = 1; break; // Dots 1 and 2
    case 'c': braille[0] = 1; braille[3] = 1; break; // Dots 1 and 4
    case 'd': braille[0] = 1; braille[3] = 1; braille[4] = 1; break; // Dots 1, 4, and 5
    case 'e': braille[0] = 1; braille[4] = 1; break; // Dots 1 and 5
    case 'f': braille[0] = 1; braille[1] = 1; braille[3] = 1; break; // Dots 1, 2, and 4
    case 'g': braille[0] = 1; braille[1] = 1; braille[3] = 1; braille[4] = 1; break; // Dots 1, 2, 4, and 5
    case 'h': braille[0] = 1; braille[1] = 1; braille[4] = 1; break; // Dots 1, 2, and 5
    case 'i': braille[1] = 1; braille[3] = 1; break; // Dots 2 and 4
    case 'j': braille[1] = 1; braille[3] = 1; braille[4] = 1; break; // Dots 2, 4, and 5
    case 'k': braille[0] = 1; braille[2] = 1; break; // Dots 1 and 3
    case 'l': braille[0] = 1; braille[1] = 1; braille[2] = 1; break; // Dots 1, 2, and 3
    case 'm': braille[0] = 1; braille[2] = 1; braille[3] = 1; break; // Dots 1, 3, and 4
    case 'n': braille[0] = 1; braille[2] = 1; braille[3] = 1; braille[4] = 1; break; // Dots 1, 3, 4, and 5
    case 'o': braille[0] = 1; braille[2] = 1; braille[4] = 1; break; // Dots 1, 3, and 5
    case 'p': braille[0] = 1; braille[1] = 1; braille[2] = 1; braille[3] = 1; break; // Dots 1, 2, 3, and 4
    case 'q': braille[0] = 1; braille[1] = 1; braille[2] = 1; braille[3] = 1; braille[4] = 1; break; // Dots 1, 2, 3, 4, and 5
    case 'r': braille[0] = 1; braille[1] = 1; braille[2] = 1; braille[4] = 1; break; // Dots 1, 2, 3, and 5
    case 's': braille[1] = 1; braille[2] = 1; braille[3] = 1; break; // Dots 2, 3, and 4
    case 't': braille[1] = 1; braille[2] = 1; braille[3] = 1; braille[4] = 1; break; // Dots 2, 3, 4, and 5
    case 'u': braille[0] = 1; braille[2] = 1; braille[5] = 1; break; // Dots 1, 3, and 6
    case 'v': braille[0] = 1; braille[1] = 1; braille[2] = 1; braille[5] = 1; break; // Dots 1, 2, 3, and 6
    case 'w': braille[1] = 1; braille[3] = 1; braille[4] = 1; braille[5] = 1; break; // Dots 2, 4, 5, and 6
    case 'x': braille[0] = 1; braille[2] = 1; braille[3] = 1; braille[5] = 1; break; // Dots 1, 3, 4, and 6
    case 'y': braille[0] = 1; braille[2] = 1; braille[3] = 1; braille[4] = 1; braille[5] = 1; break; // Dots 1, 3, 4, 5, and 6
    case 'z': braille[0] = 1; braille[2] = 1; braille[4] = 1; braille[5] = 1; break; // Dots 1, 3, 5, and 6
    default: break; // Unknown character
  }

  // Activate buzzers based on the Braille pattern
  for (int i = 0; i < 6; i++) {
    digitalWrite(buzzerPins[i], braille[i] == 1 ? HIGH : LOW);
  }

  delay(2000); // Hold the pattern for 2 seconds

  // Turn off all buzzers
  for (int i = 0; i < 6; i++) {
    digitalWrite(buzzerPins[i], LOW);
  }
}
