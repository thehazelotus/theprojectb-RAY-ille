const int flexPins[6] = {A0, A1, A2, A3, A4, A5}; // Analog pins connected to the flex sensors
const int thresholds[6] = {10, 7, 5, 7, 7, 7}; // Threshold values for each flex sensor
float emaAlpha = 0.1; // Smoothing factor for EMA, between 0 and 1
float emaValues[6]; // Array to store EMA values for each sensor

// Braille pattern to alphabet mapping
char brailleToAlphabet(int braille[6]) {
  if (braille[0] == 1 && braille[1] == 0 && braille[2] == 0 && braille[3] == 0 && braille[4] == 0 && braille[5] == 0) {
    return 'A'; // Dot 1
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 0 && braille[3] == 0 && braille[4] == 0 && braille[5] == 0) {
    return 'B'; // Dots 1 and 2
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 0 && braille[3] == 1 && braille[4] == 0 && braille[5] == 0) {
    return 'C'; // Dots 1 and 4
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 0 && braille[3] == 1 && braille[4] == 1 && braille[5] == 0) {
    return 'D'; // Dots 1, 4, and 5
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 0 && braille[3] == 0 && braille[4] == 1 && braille[5] == 0) {
    return 'E'; // Dots 1 and 5
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 0 && braille[3] == 1 && braille[4] == 0 && braille[5] == 0) {
    return 'F'; // Dots 1, 2, and 4
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 0 && braille[3] == 1 && braille[4] == 1 && braille[5] == 0) {
    return 'G'; // Dots 1, 2, 4, and 5
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 0 && braille[3] == 0 && braille[4] == 1 && braille[5] == 0) {
    return 'H'; // Dots 1, 2, and 5
  } else if (braille[0] == 0 && braille[1] == 1 && braille[2] == 0 && braille[3] == 1 && braille[4] == 0 && braille[5] == 0) {
    return 'I'; // Dots 2 and 4
  } else if (braille[0] == 0 && braille[1] == 1 && braille[2] == 0 && braille[3] == 1 && braille[4] == 1 && braille[5] == 0) {
    return 'J'; // Dots 2, 4, and 5
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 0 && braille[4] == 0 && braille[5] == 0) {
    return 'K'; // Dots 1 and 3
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 1 && braille[3] == 0 && braille[4] == 0 && braille[5] == 0) {
    return 'L'; // Dots 1, 2, and 3
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 1 && braille[4] == 0 && braille[5] == 0) {
    return 'M'; // Dots 1, 3, and 4
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 1 && braille[4] == 1 && braille[5] == 0) {
    return 'N'; // Dots 1, 3, 4, and 5
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 0 && braille[4] == 1 && braille[5] == 0) {
    return 'O'; // Dots 1, 3, and 5
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 1 && braille[3] == 1 && braille[4] == 0 && braille[5] == 0) {
    return 'P'; // Dots 1, 2, 3, and 4
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 1 && braille[3] == 1 && braille[4] == 1 && braille[5] == 0) {
    return 'Q'; // Dots 1, 2, 3, 4, and 5
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 1 && braille[3] == 0 && braille[4] == 1 && braille[5] == 0) {
    return 'R'; // Dots 1, 2, 3, and 5
  } else if (braille[0] == 0 && braille[1] == 1 && braille[2] == 1 && braille[3] == 1 && braille[4] == 0 && braille[5] == 0) {
    return 'S'; // Dots 2, 3, and 4
  } else if (braille[0] == 0 && braille[1] == 1 && braille[2] == 1 && braille[3] == 1 && braille[4] == 1 && braille[5] == 0) {
    return 'T'; // Dots 2, 3, 4, and 5
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 0 && braille[4] == 0 && braille[5] == 1) {
    return 'U'; // Dots 1, 3, and 6
  } else if (braille[0] == 1 && braille[1] == 1 && braille[2] == 1 && braille[3] == 0 && braille[4] == 0 && braille[5] == 1) {
    return 'V'; // Dots 1, 2, 3, and 6
  } else if (braille[0] == 0 && braille[1] == 1 && braille[2] == 0 && braille[3] == 1 && braille[4] == 1 && braille[5] == 1) {
    return 'W'; // Dots 2, 4, 5, and 6
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 1 && braille[4] == 0 && braille[5] == 1) {
    return 'X'; // Dots 1, 3, 4, and 6
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 1 && braille[4] == 1 && braille[5] == 1) {
    return 'Y'; // Dots 1, 3, 4, 5, and 6
  } else if (braille[0] == 1 && braille[1] == 0 && braille[2] == 1 && braille[3] == 0 && braille[4] == 1 && braille[5] == 1) {
    return 'Z'; // Dots 1, 3, 5, and 6
  }
  // Add more mappings for other Braille characters as needed
  return '?'; // Unknown character
}

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < 6; i++) {
    pinMode(flexPins[i], INPUT);
    emaValues[i] = analogRead(flexPins[i]); // Initialize EMA values with the first sensor readings
  }
}

void loop() {
  int braille[6] = {0}; // Array to store the state of each Braille dot (1 or 0)

  // Read the value from each flex sensor, apply EMA, and determine if it is bent
  for (int i = 0; i < 6; i++) {
    int sensorValue = analogRead(flexPins[i]);
    emaValues[i] = emaAlpha * sensorValue + (1 - emaAlpha) * emaValues[i]; // Apply EMA
    if (emaValues[i] > thresholds[i]) {
      braille[i] = 1;
    } else {
      braille[i] = 0;
    }
  }

  // Convert Braille pattern to alphabet
  char character = brailleToAlphabet(braille);

  // Print the Braille pattern and corresponding alphabet
  Serial.print("Braille pattern: ");
  for (int i = 0; i < 6; i++) {
    Serial.print(braille[i]);
    if (i == 2) {
      Serial.print(" "); // Space between the two columns of the Braille cell
    }
  }
  Serial.print(" -> Character: ");
  Serial.println(character);

  delay(100); // Short delay to make the output readable
}
